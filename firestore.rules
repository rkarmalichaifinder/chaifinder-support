rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read their own notification tokens
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Friend requests subcollection
      match /incomingFriendRequests/{requesterId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /outgoingFriendRequests/{recipientId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Challenge progress subcollection
      match /challengeProgress/{challengeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Weekly challenges collection
    match /weeklyChallenges/{challengeId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can create/modify challenges
    }
    
    // Ratings collection
    match /ratings/{ratingId} {
      allow read: if request.auth != null && (
        // Public ratings can be read by anyone
        resource.data.visibility == "public" ||
        // Private ratings can only be read by the owner
        (resource.data.visibility == "private" && request.auth.uid == resource.data.userId) ||
        // Friends-only ratings can be read by friends
        (resource.data.visibility == "friends" && (
          request.auth.uid == resource.data.userId ||
          request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.userId)).data.friends
        ))
      );
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Chai spots collection
    match /chaiSpots/{spotId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null; // Authenticated users can write
    }
    
    // Friends collection (if using separate collection)
    match /friends/{friendshipId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 