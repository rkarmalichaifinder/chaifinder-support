rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Allow users to read their own full profile
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read other users' basic profile information for friend requests and search
      // This enables displaying names, emails, and photos in friend requests and search results
      allow read: if request.auth != null;
      
      // Allow users to read their own notification tokens
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Friend requests subcollection
      match /incomingFriendRequests/{requesterId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /outgoingFriendRequests/{recipientId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Friends subcollection
      match /friends/{friendId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Challenge progress subcollection
      match /challengeProgress/{challengeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Weekly challenges collection
    match /weeklyChallenges/{challengeId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can create/modify challenges
    }
    
    // Ratings collection
    match /ratings/{ratingId} {
      allow read: if request.auth != null; // Allow authenticated users to read all ratings
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow users to update visibility and deleted fields for their own ratings
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['visibility', 'deleted', 'updatedAt']));
      
      // ðŸ†• Allow any authenticated user to update reaction counts
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
    }
    
    // Chai spots collection
    match /chaiSpots/{spotId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null; // Authenticated users can write
    }
    
    // ChaiFinder collection (current)
    match /chaiFinder/{spotId} {
      allow read: if true; // Public read access - no authentication required
      allow write: if request.auth != null; // Only authenticated users can write
    }
    
    // Friends collection (if using separate collection)
    match /friends/{friendshipId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 